import asyncio
import logging
import time
import json
import os
from datetime import datetime
from typing import List, Dict
import requests

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
from search_engines import search_multiple_engines
from analyzer import ContentAnalyzer

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Telegram
TELEGRAM_BOT_TOKEN = "7513451139:AAH1PEHjQS4_y0N2YWCT4Lf0C9hVCybprO0"
TELEGRAM_CHAT_ID = "-1002605135756"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f"gambling_detector_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def ensure_directory(directory):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡πá‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    if not os.path.exists(directory):
        os.makedirs(directory)

def send_telegram_message(message: str) -> bool:
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram"""
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            data={"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
        )
        if response.status_code == 200:
            logger.info("Successfully sent Telegram message")
            return True
        else:
            logger.error(f"Failed to send Telegram message: {response.text}")
            return False
    except Exception as e:
        logger.error(f"Error sending Telegram message: {e}")
        return False

def format_alert_message(domain: str, keyword: str, result: Dict) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    matches_text = ""
    for k, contexts in result.get("matches", {}).items():
        matches_text += f"\nüîç ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '{k}' {len(contexts)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        for i, context in enumerate(contexts[:3]):
            if i >= 3:
                matches_text += "...\n"
                break
            matches_text += f"  {i+1}. ...{context}...\n"
    
    return f"""üö® <b>‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢</b> üö®
üåê <b>‡πÇ‡∏î‡πÄ‡∏°‡∏ô:</b> {domain}
üîë <b>‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö:</b> {keyword}
üîó <b>URL:</b> <a href="{result['url']}">{result.get('title', result['url'])}</a>
{matches_text}
‚è∞ <b>‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

async def process_domain_keyword_pair(domain: str, keyword: str, analyzer: ContentAnalyzer) -> List[Dict]:
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏π‡πà‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
    try:
        logger.info(f"Processing domain: {domain} with keyword: {keyword}")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        search_results = await search_multiple_engines(domain, keyword)
        
        if not search_results:
            logger.info(f"No search results found for domain: {domain} with keyword: {keyword}")
            return []
        
        logger.info(f"Found {len(search_results)} preliminary results for {domain} with keyword: {keyword}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÜ
        confirmed_results = await analyzer.analyze_search_results(search_results, [keyword])
        
        if confirmed_results:
            logger.info(f"Confirmed {len(confirmed_results)} results with keyword '{keyword}' for domain: {domain}")
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            ensure_directory("results")
            with open(f"results/{domain}_{keyword}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", "w", encoding="utf-8") as f:
                json.dump(confirmed_results, f, ensure_ascii=False, indent=2)
        else:
            logger.info(f"No confirmed results with keyword '{keyword}' for domain: {domain}")
        
        return confirmed_results
    except Exception as e:
        logger.error(f"Error processing {domain} with keyword {keyword}: {e}")
        return []

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡πá‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        ensure_directory("results")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        with open("domains.txt", "r", encoding="utf-8-sig") as f:
            domains = [line.strip() for line in f if line.strip()]
        
        with open("keywords1.txt", "r", encoding="utf-8-sig") as f:
            keywords = [line.strip() for line in f if line.strip()]
        
        logger.info(f"Loaded {len(domains)} domains and {len(keywords)} keywords")
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_message = f"üîç <b>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</b>\nüìä ‡πÇ‡∏î‡πÄ‡∏°‡∏ô: {len(domains)}\nüîë ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {len(keywords)}\n‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        send_telegram_message(start_message)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        analyzer = ContentAnalyzer()
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        all_confirmed_results = []
        total_pairs = len(domains) * len(keywords)
        processed = 0
        
        for domain in domains:
            domain_results = []
            for keyword in keywords:
                processed += 1
                logger.info(f"Processing pair {processed}/{total_pairs}: {domain} with keyword '{keyword}'")
                
                # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
                if processed > 1:
                    delay = 3 + (processed % 3)  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
                    logger.info(f"Waiting for {delay} seconds before next request...")
                    await asyncio.sleep(delay)
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏π‡πà‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                confirmed_results = await process_domain_keyword_pair(domain, keyword, analyzer)
                
                # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                for result in confirmed_results:
                    alert_message = format_alert_message(domain, keyword, result)
                    send_telegram_message(alert_message)
                    # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    await asyncio.sleep(1)
                
                domain_results.extend(confirmed_results)
            
            if domain_results:
                all_confirmed_results.extend(domain_results)
                # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô
                domain_summary = f"üìä <b>‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡πÄ‡∏°‡∏ô:</b> {domain}\nüö® ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢ {len(domain_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                send_telegram_message(domain_summary)
        
        # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        end_message = f"""üèÅ <b>‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</b>
üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {len(domains)} ‡πÇ‡∏î‡πÄ‡∏°‡∏ô √ó {len(keywords)} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ = {total_pairs} ‡∏Ñ‡∏π‡πà
üö® ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢: {len(all_confirmed_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚è∞ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
        send_telegram_message(end_message)
        
        logger.info(f"Scan completed. Found {len(all_confirmed_results)} gambling-related matches.")
        
    except Exception as e:
        logger.error(f"Critical error in main function: {e}")
        send_telegram_message(f"‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>\n{str(e)}")

if __name__ == "__main__":
    asyncio.run(main())